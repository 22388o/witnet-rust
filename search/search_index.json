{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Witnet-rust \u00b6 Witnet-rust is an open-source implementation of the Witnet protocol written in Rust. The Witnet protocol, as outlined by the Witnet Whitepaper , allows a network of computers to act as a \"decentralized oracle\" that retrieves, attests and delivers information to smart contracts without having to place trust in a single entity. This Decentralized Oracle Network (DON) maintains and distributes a block chain data structure that serves as a common ledger for the operation of the protocol as well as for the wit token, which is central to incentivizing the network players to abide by the protocol and make them liable for any misbehavior. Active network participants will earn wit tokens for fulfilling the data retrieval, attestation and delivery tasks coming from different smart contract platforms such as Ethereum and RChain. Witnet-rust is the first open-source implementation of the Witnet protocol and leverages the Rust programming language to achieve utmost speed, memory safety and fearless concurrency without compromising on performance. Tip See \" Why Rust? \" for a more technical overview on why we chose Rust. Get started \u00b6 Installation \u00b6 Witnet-rust is an open-source native app providing \"full node\" functionality of the Witnet Decentralized Oracle Network protocol. It is available under the GNU General Public License v3.0 . You may refer to the installation guide in order to install the app together with its dependencies. Roadmap \u00b6 Witnet-rust is an ambitious effort in its early days. We are currently working towards launching our first testnet. As you can guess from our datailed roadmap and GitHub issues , there are still a lot of missing features (and a whole lot more that would be nice to have yet not critical for our testnet launch). Contributing \u00b6 See the contributing guide to get more information on how to contribute to Rust-witnet development, and the roadmap to find out what features are coming soon.","title":"Home"},{"location":"#witnet-rust","text":"Witnet-rust is an open-source implementation of the Witnet protocol written in Rust. The Witnet protocol, as outlined by the Witnet Whitepaper , allows a network of computers to act as a \"decentralized oracle\" that retrieves, attests and delivers information to smart contracts without having to place trust in a single entity. This Decentralized Oracle Network (DON) maintains and distributes a block chain data structure that serves as a common ledger for the operation of the protocol as well as for the wit token, which is central to incentivizing the network players to abide by the protocol and make them liable for any misbehavior. Active network participants will earn wit tokens for fulfilling the data retrieval, attestation and delivery tasks coming from different smart contract platforms such as Ethereum and RChain. Witnet-rust is the first open-source implementation of the Witnet protocol and leverages the Rust programming language to achieve utmost speed, memory safety and fearless concurrency without compromising on performance. Tip See \" Why Rust? \" for a more technical overview on why we chose Rust.","title":"Witnet-rust"},{"location":"#get-started","text":"","title":"Get started"},{"location":"#installation","text":"Witnet-rust is an open-source native app providing \"full node\" functionality of the Witnet Decentralized Oracle Network protocol. It is available under the GNU General Public License v3.0 . You may refer to the installation guide in order to install the app together with its dependencies.","title":"Installation"},{"location":"#roadmap","text":"Witnet-rust is an ambitious effort in its early days. We are currently working towards launching our first testnet. As you can guess from our datailed roadmap and GitHub issues , there are still a lot of missing features (and a whole lot more that would be nice to have yet not critical for our testnet launch).","title":"Roadmap"},{"location":"#contributing","text":"See the contributing guide to get more information on how to contribute to Rust-witnet development, and the roadmap to find out what features are coming soon.","title":"Contributing"},{"location":"contributing/","text":"Contributing to Witnet-rust \u00b6 Thank you for being interested in contributing to Witnet! The following is a set of guidelines and helpful pointers for contributing to Witnet The keyword here is guidelines, not rules. As such, use your best judgement and feel free to propose changes to even this document. Code of conduct \u00b6 Everyone participating in this project is governed by the Witnet Code of Conduct . By participating, you are expected to uphold this code as well. I just have a question \u00b6 Please don't file an issue with questions. It's easier for you and for us if you go directly to our Gitter chatroom , since it will keep our repositories clean and you will get a faster response. How can I contribute? \u00b6 Find an area you can help with and do it. Open source is about collaboration and open participation. Try to make your code look like what already exists and submit a pull request. The list of issues is a good place to start, especially the ones tagged as \"good first issue\" or \"help wanted\" (but don't let that stop you from looking at others). If you're looking for additional ideas, the code includes TODO comments for minor to major improvements. Grep is your friend. Additional tests are rewarded with an immense amount of positive karma. More documentation or updates/fixes to existing documentation are also very welcome. However, if submitting a PR consisting of documentation changes only, please try to ensure that the change is significantly more substantial than one or two lines. For example, working through an install document and making changes and updates throughout as you find issues is worth a PR. For typos and other small changes, either contact one of the developers, or if you think it's a significant enough error to cause problems for other users, please feel free to open an issue. Reporting bugs \u00b6 This section guides you through submitting a bug report. This helps contributors and maintainers understand your report, reproduce the behavior, and in turn squash the bug. Before submitting a bug report, please make sure that you've searched through the issues and that there isn't already an issue describing the same issue you are having. How do I submit a good bug report? \u00b6 Bugs are tracked as GitHub issues . Explain the problem and include additional details to help maintainers reproduce the problem: Use a clear and descriptive title for the issue to identify the problem. Describe the exact steps which reproduce the problem in as many details as possible. Provide specific examples to demonstrate the steps. Include links to files or GitHub projects, or copy/pasteable snippets, which you use in those examples. If you're providing snippets in the issue, use Markdown code blocks. Describe the behavior you observed after following the steps and point out what exactly is the problem with that behavior. Explain which behavior you expected to see instead and why. Post a screenshot or a dump of the developer console If the problem wasn't triggered by a specific action, describe what you were doing before the problem happened and share more information using the guidelines below. Provide more context by answering these questions: Did the problem start happening recently (e.g. after updating to a new version) or was this always a problem? If the problem started happening recently, can you reproduce the problem in an older version of Witnet-rust? What's the most recent version in which the problem doesn't happen? Can you reliably reproduce the issue? If not, provide details about how often the problem happens and under which conditions it normally happens. Include details about your configuration and environment: Which version of rustc are you using? You can get the exact version by running rustc --version --verbose in your terminal. What's your operating system and version? Suggesting enhancements \u00b6 This section guides you through submitting an enhancement suggestion, including completely new features and minor improvements to existing functionality. Following these guidelines helps maintainers and the community understand your suggestion. Before creating enhancement suggestions, please double check that there is not already an existing feature suggestion for your feature, as you might find out that you don't need to create one. When you are creating an enhancement suggestion, please include as many details as possible. How Do I Submit A Good Enhancement Suggestion? \u00b6 Enhancement suggestions are tracked as GitHub issues. Create an issue on that repository and provide the following information: Use a clear and descriptive title for the issue to identify the suggestion. Provide a step-by-step description of the suggested enhancement in as many details as possible. Provide specific examples to demonstrate the steps. Include copy/pasteable snippets which you use in those examples, as Markdown code blocks. Describe the current behavior and explain which behavior you expected to see instead and why. Explain why this enhancement would be useful to most users and isn't something that can or should be implemented as a community package. Your First Code Contribution \u00b6 Unsure where to begin contributing? You can start by looking through these good first issue issues: Good first issue - issues which should only require a few lines of code, and a test or two. Copyright \u00b6 These guidelines are inspired by: AragonJS Contributing Guidelines , published under the Creative Commons Zero v1.0 Universal License . Grin Contributing Guide , published under the Apache License 2.0 .","title":"Contributing"},{"location":"contributing/#contributing-to-witnet-rust","text":"Thank you for being interested in contributing to Witnet! The following is a set of guidelines and helpful pointers for contributing to Witnet The keyword here is guidelines, not rules. As such, use your best judgement and feel free to propose changes to even this document.","title":"Contributing to Witnet-rust"},{"location":"contributing/#code-of-conduct","text":"Everyone participating in this project is governed by the Witnet Code of Conduct . By participating, you are expected to uphold this code as well.","title":"Code of conduct"},{"location":"contributing/#i-just-have-a-question","text":"Please don't file an issue with questions. It's easier for you and for us if you go directly to our Gitter chatroom , since it will keep our repositories clean and you will get a faster response.","title":"I just have a question"},{"location":"contributing/#how-can-i-contribute","text":"Find an area you can help with and do it. Open source is about collaboration and open participation. Try to make your code look like what already exists and submit a pull request. The list of issues is a good place to start, especially the ones tagged as \"good first issue\" or \"help wanted\" (but don't let that stop you from looking at others). If you're looking for additional ideas, the code includes TODO comments for minor to major improvements. Grep is your friend. Additional tests are rewarded with an immense amount of positive karma. More documentation or updates/fixes to existing documentation are also very welcome. However, if submitting a PR consisting of documentation changes only, please try to ensure that the change is significantly more substantial than one or two lines. For example, working through an install document and making changes and updates throughout as you find issues is worth a PR. For typos and other small changes, either contact one of the developers, or if you think it's a significant enough error to cause problems for other users, please feel free to open an issue.","title":"How can I contribute?"},{"location":"contributing/#reporting-bugs","text":"This section guides you through submitting a bug report. This helps contributors and maintainers understand your report, reproduce the behavior, and in turn squash the bug. Before submitting a bug report, please make sure that you've searched through the issues and that there isn't already an issue describing the same issue you are having.","title":"Reporting bugs"},{"location":"contributing/#how-do-i-submit-a-good-bug-report","text":"Bugs are tracked as GitHub issues . Explain the problem and include additional details to help maintainers reproduce the problem: Use a clear and descriptive title for the issue to identify the problem. Describe the exact steps which reproduce the problem in as many details as possible. Provide specific examples to demonstrate the steps. Include links to files or GitHub projects, or copy/pasteable snippets, which you use in those examples. If you're providing snippets in the issue, use Markdown code blocks. Describe the behavior you observed after following the steps and point out what exactly is the problem with that behavior. Explain which behavior you expected to see instead and why. Post a screenshot or a dump of the developer console If the problem wasn't triggered by a specific action, describe what you were doing before the problem happened and share more information using the guidelines below. Provide more context by answering these questions: Did the problem start happening recently (e.g. after updating to a new version) or was this always a problem? If the problem started happening recently, can you reproduce the problem in an older version of Witnet-rust? What's the most recent version in which the problem doesn't happen? Can you reliably reproduce the issue? If not, provide details about how often the problem happens and under which conditions it normally happens. Include details about your configuration and environment: Which version of rustc are you using? You can get the exact version by running rustc --version --verbose in your terminal. What's your operating system and version?","title":"How do I submit a good bug report?"},{"location":"contributing/#suggesting-enhancements","text":"This section guides you through submitting an enhancement suggestion, including completely new features and minor improvements to existing functionality. Following these guidelines helps maintainers and the community understand your suggestion. Before creating enhancement suggestions, please double check that there is not already an existing feature suggestion for your feature, as you might find out that you don't need to create one. When you are creating an enhancement suggestion, please include as many details as possible.","title":"Suggesting enhancements"},{"location":"contributing/#how-do-i-submit-a-good-enhancement-suggestion","text":"Enhancement suggestions are tracked as GitHub issues. Create an issue on that repository and provide the following information: Use a clear and descriptive title for the issue to identify the suggestion. Provide a step-by-step description of the suggested enhancement in as many details as possible. Provide specific examples to demonstrate the steps. Include copy/pasteable snippets which you use in those examples, as Markdown code blocks. Describe the current behavior and explain which behavior you expected to see instead and why. Explain why this enhancement would be useful to most users and isn't something that can or should be implemented as a community package.","title":"How Do I Submit A Good Enhancement Suggestion?"},{"location":"contributing/#your-first-code-contribution","text":"Unsure where to begin contributing? You can start by looking through these good first issue issues: Good first issue - issues which should only require a few lines of code, and a test or two.","title":"Your First Code Contribution"},{"location":"contributing/#copyright","text":"These guidelines are inspired by: AragonJS Contributing Guidelines , published under the Creative Commons Zero v1.0 Universal License . Grin Contributing Guide , published under the Apache License 2.0 .","title":"Copyright"},{"location":"get-started/why-rust/","text":"Why Rust? \u00b6 Having its own underlying blockchain, Witnet requires code that is as fast as C or C++ but memory safe to prevent security vulnerabilities. At the same time, we want to produce concurrent code that can take advantage of modern hardware. After analyzing the possible languages to use, we found that Rust is a fast, memory safe and highly concurrent language which allows for writing complex multithreaded code without race conditions or dangling pointers. It allows fearless concurrency without compromising on performance. Having an undeniable influence from functional languages like ML or Haskell, Rust is very expressive yet it uses high level abstractions. This makes it easy to write correct and readable code, which in turn translates into faster and more productive development. Rust is statically typed but it sports a really nice type inferer which makes code succinct and readable. The absence of a garbage collector and low runtime requirements makes it easy to embed Rust code inside other languages like Python, Ruby or Nodejs. This is fundamental for building the bridges between Witnet and other blockchains as well as with the headless browser that will allow Witnet to perform web content retrievals. The Rust compiler is simply awesome, offering the most helpful messages we have seen in a compiler. It also has incremental compilation, which helps developers save their valuable time. No more reinventing the wheel. Unlike C or C++, Rust has a package manager\u200a\u2014\u200aa tool called cargo. Besides managing the dependencies of the project, cargo gives you the option to build, run, test, generate documentation and publish your own package to a community driven package repository. Metaprogramming. Rust macros allow for reusing code in a concise, well-abstracted way with a powerful compile-time correctness checking. And last but not least, Rust has an ever-welcoming community that is always willing to help and is currently growing at a very healthy pace. In addition, it is currently in a stage in which the ecosystem is mature enough so that you d Summing up, here are the 8 reasons why Witnet will make the most of Rust: Performance Memory safety Concurrency Influence from functional languages Statically typed with type inference Awesome compiler and tooling Metaprogramming Thriving community Tip By the way, do you love Rust and want to join one of the most exciting projects using it in the blockchain space? We\u2019re hiring! See our current open positions on AngelList .","title":"Why Rust?"},{"location":"get-started/why-rust/#why-rust","text":"Having its own underlying blockchain, Witnet requires code that is as fast as C or C++ but memory safe to prevent security vulnerabilities. At the same time, we want to produce concurrent code that can take advantage of modern hardware. After analyzing the possible languages to use, we found that Rust is a fast, memory safe and highly concurrent language which allows for writing complex multithreaded code without race conditions or dangling pointers. It allows fearless concurrency without compromising on performance. Having an undeniable influence from functional languages like ML or Haskell, Rust is very expressive yet it uses high level abstractions. This makes it easy to write correct and readable code, which in turn translates into faster and more productive development. Rust is statically typed but it sports a really nice type inferer which makes code succinct and readable. The absence of a garbage collector and low runtime requirements makes it easy to embed Rust code inside other languages like Python, Ruby or Nodejs. This is fundamental for building the bridges between Witnet and other blockchains as well as with the headless browser that will allow Witnet to perform web content retrievals. The Rust compiler is simply awesome, offering the most helpful messages we have seen in a compiler. It also has incremental compilation, which helps developers save their valuable time. No more reinventing the wheel. Unlike C or C++, Rust has a package manager\u200a\u2014\u200aa tool called cargo. Besides managing the dependencies of the project, cargo gives you the option to build, run, test, generate documentation and publish your own package to a community driven package repository. Metaprogramming. Rust macros allow for reusing code in a concise, well-abstracted way with a powerful compile-time correctness checking. And last but not least, Rust has an ever-welcoming community that is always willing to help and is currently growing at a very healthy pace. In addition, it is currently in a stage in which the ecosystem is mature enough so that you d Summing up, here are the 8 reasons why Witnet will make the most of Rust: Performance Memory safety Concurrency Influence from functional languages Statically typed with type inference Awesome compiler and tooling Metaprogramming Thriving community Tip By the way, do you love Rust and want to join one of the most exciting projects using it in the blockchain space? We\u2019re hiring! See our current open positions on AngelList .","title":"Why Rust?"}]}